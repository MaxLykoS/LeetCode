class Solution {
public:
int numMagicSquaresInside(vector<vector<int>>& grid) 
{
	if (grid.size() < 3 || grid[0].size() < 3)
		return 0;

	int cnt = 0;
	int size_i = grid.size() - 3;
	int size_j = grid[0].size() - 3;
	bool book[11],flag;

	for (int i = 0; i <= size_i; ++i)
	{
		for (int j = 0; j <= size_j; ++j)
		{
			memset(book, false, sizeof(book));
			flag = false;
			for (int i2 = i; i2 < i + 3; ++i2)
			{
				for (int j2 = j; j2 < j + 3; ++j2)
				{
					if ((grid[i2][j2] == 0 || grid[i2][j2] > 9)
						||book[grid[i2][j2]])
					{
						flag = true;
						break;
					}
					book[grid[i2][j2]] = true;
				}
				if (flag)
					break;
			}
			if (flag)
				continue;
			int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2];
			if (sum ==grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] &&
				sum == grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] &&
				sum == grid[i][j] + grid[i + 1][j] + grid[i + 2][j] &&
				sum == grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] &&
				sum == grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] &&
				sum == grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] &&
				sum == grid[i + 2][j] + grid[i + 1][j + 1] + grid[i][j + 2])
				++cnt;
		}
	}

	return cnt;
}
};
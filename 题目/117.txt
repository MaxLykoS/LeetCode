class Solution 
{
public:
    Node* connect(Node* root) 
    {
        if (root == nullptr)
            return root;
        root->next = nullptr;
        std::queue<std::tuple<Node*, int>> q;

        q.push(std::make_tuple(root, 0));
        
        int layer = 0;
        Node* left = root; int leftLayer = 0;
        while (!q.empty())
        {
            std::tuple<Node*, int> tuple = q.front();
            q.pop();
            Node* node = std::get<0>(tuple);
            int layer = std::get<1>(tuple);

            if (node != root)
            {
                if (leftLayer == layer)
                    left->next = node;
                else
                    left->next = nullptr;
            }

            left = node;
            leftLayer = layer;
            ++layer;

            if (node->left != nullptr)
                q.push(std::make_tuple(node->left, layer));
            if (node->right != nullptr)
                q.push(std::make_tuple(node->right, layer));
        }

        return root;
    }
};
class Solution {
public:
	// a b c c b a
	// 0 1 2 3 4 5
	//   1   3
	std::string longestPalindrome(std::string s)
	{
		int len = s.size();
		if (len < 2)return s;

		int maxLen = 1;
		int begin = 0;

		std::vector<std::vector<bool>> dp(len, std::vector<bool>(len, false));
		for (int i = 0; i < len; i++)
			dp[i][i] = true;

		for (int j = 1; j < len; j++)
		{
			for (int i = 0; i < j; i++)
			{
				if (s[i] != s[j])
				{
					dp[i][j] = false;
				}
				else if (s[i] == s[j] && j - i + 1 < 4)   // a   a a   a b a
				{
					dp[i][j] = true;
					if (maxLen < j - i + 1)
					{
						maxLen = j - i + 1;
						begin = i;
					}
				}
				else if (s[i] == s[j] && dp[i + 1][j - 1] == true)
				{
					if (maxLen < j - i + 1)
					{
						maxLen = j - i + 1;
						begin = i;
					}
					dp[i][j] = true;
				}
				else
					dp[i][j] = dp[i + 1][j - 1];
			}
		}
		return s.substr(begin, maxLen);
	}
};
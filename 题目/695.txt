class Solution {
public:
    const int dir[4][2] = { -1,0,0,1,1,0,0,-1 };
    int size = 0;
    int maxsize = 0;
    bool check(const int x, const int y, const std::vector<std::vector<int>>& grid)
    {
        return x >= 0 && x < grid.size() && y >= 0 && y < grid.front().size();
    }
    void search(const int x,const int y,std::vector<std::vector<int>>& grid)
    {
        if (grid[x][y] == 1)
        {
            size++;
            maxsize = std::max(size, maxsize);
            grid[x][y] = 2;
        }
        else
            return;
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dir[i][0];
            int ny = y + dir[i][1];
            if (check(nx, ny, grid))
            {
                search(nx, ny, grid);
            }
        }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) 
    {
        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid.front().size(); j++)
            {
                if (grid[i][j] == 1)
                {
                    size = 0;
                    search(i, j, grid);
                }
            }
        }
        return maxsize;
    }
};
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* increasingBST(TreeNode* root) 
    {
        TreeNode* node = root;
        auto nodes = std::vector<TreeNode*>();
        auto stack = std::stack<TreeNode*>();

        stack.push(node);
        while (stack.size() != 0)
        {
            while (stack.top()->left != NULL)
            {
                stack.push(stack.top()->left);
            }
            while (!stack.empty())
            {
                TreeNode* cur = stack.top();
                nodes.emplace_back(cur);
                stack.pop();

                if (cur->right != NULL) 
                {
                    stack.push(cur->right);
                    break;
                }
            }
        }

        root = nodes.front();
        for (int i = 0; i < nodes.size()-1; i++)
        {
            nodes[i]->left = nullptr;
            nodes[i]->right = nodes[i + 1];
        }
        nodes.back()->left = nullptr;
        nodes.back()->right = nullptr;

        return root;
    }
};
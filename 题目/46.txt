class Solution
{
public:
    std::vector<std::vector<int>> ans;
    std::vector<bool> visited;
    std::vector<int> t;
    void DFS(int counts, const std::vector<int>& nums)
    {
        if (counts == nums.size())
        {
            ans.push_back(t);
            return;
        }

        for (int i = 0; i < nums.size(); i++)
        {
            if (!visited[i])
            {
                t.push_back(nums[i]);
                visited[i] = true;
                DFS(counts + 1, nums);

                t.pop_back();
                visited[i] = false;
            }
        }
    }
    std::vector<std::vector<int>> permute(std::vector<int>& nums) 
    {
        visited = std::vector<bool>(nums.size(), false);
        DFS(0, nums);

        return ans;
    }
};
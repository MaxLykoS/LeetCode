class Solution {
public:
	int ans;
	int k;
	void DFS(const std::vector<int>& jobs, int u, std::vector<int>& worker, int max)
	{
		if (max >= ans)
			return;
		if (u == jobs.size())
		{
			ans = max;
			return;
		}
		auto set = std::set<int>();
		for (int i = 0; i < worker.size(); i++)
		{
			if (set.find(worker[i]) == set.end())
				set.insert(worker[i]);
			else
				continue;
			worker[i] += jobs[u];
			DFS(jobs, u + 1, worker, std::max(worker[i], max));
			worker[i] -= jobs[u];
		}
	}
	int minimumTimeRequired(std::vector<int>& jobs, int k) 
	{
		k = k;
		ans = std::numeric_limits<int>().max();
		auto worker = std::vector<int>(k, 0);
		DFS(jobs, 0, worker, 0);
		return ans;
	}
};
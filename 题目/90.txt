class Solution 
{
public:
    std::vector<std::vector<int>> ret = std::vector<std::vector<int>>();
    void DFS(const int start, std::vector<int>& track, const std::vector<int>& nums)
    {
        ret.emplace_back(track);
        for (int i = start; i < nums.size(); i++)
        {
            if(i>start&&nums[i]==nums[i-1])
                continue;
            track.emplace_back(nums[i]);
            DFS(i + 1, track, nums);
            track.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) 
    {
        auto track = std::vector<int>();
        sort(nums.begin(),nums.end());
        DFS(0, track, nums); 
        return ret;
    }
};
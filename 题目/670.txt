class Solution {
public:
    int maximumSwap(int num) 
    {
        auto numClone = num;
        auto nums = std::vector<int>();
        while (num >= 1)
        {
            nums.emplace_back(num % 10);
            num /= 10;
        }
        auto sortedNums = nums;
        std::sort(sortedNums.begin(), sortedNums.end());
        int num1=-1, num2=-1;
        int inum1, inum2;
        for (int i = nums.size() - 1; i >= 0; i--)
        {
            if (nums[i] != sortedNums[i])
            {
                num1 = nums[i];
                num2 = sortedNums[i];
                for (int j = i; j >= 0; j--)
                {
                    if (nums[j] == num1)
                    {
                        inum1 = j;
                        break;
                    }
                }
                for (int j = 0; j < nums.size(); j++)
                {
                    if (nums[j] == num2)
                    {
                        inum2 = j;
                        break;
                    }
                }
                break;
            }
        }
        if (num1 == -1 || num2 == -1)
            return numClone;
        std::swap(nums[inum1], nums[inum2]);
        int ret = 0;
        for (int i = nums.size() - 1; i >= 0; i--)
        {
            ret += nums[i] * std::pow(10.0f, i);
        }
        return ret;
    }
};
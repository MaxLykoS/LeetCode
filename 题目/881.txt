
int partition(std::vector<int>& nums, int left, int right)
{
    int x = nums[right];
    int i = left - 1;
    for (int j = left; j < right; ++j)
    {
        if (nums[j] < x)
        {
            ++i;
            std::swap(nums[i], nums[j]);
        }     
    }
    std::swap(nums[i + 1], nums[right]);
    return i + 1;
}
void qs(std::vector<int>& nums, int left, int right)
{
    if (left < right)
    {
        int pivot = partition(nums, left, right);

        qs(nums, left, pivot - 1);
        qs(nums, pivot + 1, right);
    }
}

class Solution
{
public:
    int numRescueBoats(std::vector<int>& people, int limit)
    {
        //qs(people, 0, people.size() - 1);

        std::sort(people.begin(), people.end());

        int left = 0, right = people.size() - 1;

        int ans = 0;
        while (left<=right)
        {
            int sum = people[left] + people[right];

            if (sum <= limit)
            {
                left += 1;
                right -= 1;
            }
            else
            {
                right -= 1;
            }

            ++ans;
        }

        return ans;
    }
};


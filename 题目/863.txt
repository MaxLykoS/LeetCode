
class Solution
{
public:
    std::unordered_map<int, std::vector<int>> map;
    std::vector<int> ans;
    void Traverse(TreeNode* tn)
    {
        if (tn->left != nullptr)
        {
            map[tn->val].emplace_back(tn->left->val); // 3 - 5
            map[tn->left->val].emplace_back(tn->val); // 5 - 3
            Traverse(tn->left);
        }
        if (tn->right != nullptr)
        {
            map[tn->val].emplace_back(tn->right->val); // 3 - 1
            map[tn->right->val].emplace_back(tn->val); // 1 - 3
            Traverse(tn->right);
        }
    }
    void DFS(int node, const int& father, int kLeft, const int& start)
    {
        if (kLeft == 0)
        {
            if (node != start)
            {
                ans.emplace_back(node);
            }
        }
        else
        {

            for (const int& edge : map[node])
            {
                if(edge != father)
                    DFS(edge, node, kLeft - 1, start);
            }
        }
    }
    std::vector<int> distanceK(TreeNode* root, TreeNode* target, int k) 
    {
        if (k == 0)
            return std::vector<int>({ target->val });
        Traverse(root);

        DFS(target->val, target->val, k, target->val);

        return ans;
    }
};
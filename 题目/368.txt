class Solution {
public:
    std::vector<int> largestDivisibleSubset(std::vector<int>& nums) 
    {
        int len = nums.size();
        if (len <= 1)
            return nums;
        std::sort(nums.begin(), nums.end());
        auto dp = std::vector<std::vector<int>>(len, std::vector<int>());
        for (int i = 0; i < dp.size(); i++)
            dp[i].emplace_back(nums[i]);
        for (int i = 1; i < len; i++) //nums
        {
            for (int j = 0; j <= i - 1; j++) //dp[]
            {
                if (nums[i] % nums[j] == 0&&dp[j].size()+1>dp[i].size())
                {
                    dp[i] = dp[j];
                    dp[i].emplace_back(nums[i]);
                }
            }
        }
        int maxIndex = 0, maxLen = -1;
        for (int i = 0; i < dp.size(); i++)
        {
            int asd = dp[i].size();
            if (asd > maxLen)
            {
                maxLen = asd;
                maxIndex = i;
            }
        }
        return dp[maxIndex];
    }
};
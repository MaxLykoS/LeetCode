/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    std::unordered_map<int, int> imap;
    TreeNode* Post(int inleft,int inright, int postleft,int postright,const std::vector<int>& in, const std::vector<int>& post)
    {
        if (inleft > inright) 
        {
            return nullptr;
        }
        //左根右in    9   *3         15 20 7
        //左友根post  9   15 7 20    *3
        //            0   1  2 3     4  5  6
        int inRootIndex = imap[post[postright]];
        int leftSubtreeCnt = inRootIndex - inleft;
        TreeNode* head = new TreeNode(post[postright]);
        head->left = Post(inleft, inleft + leftSubtreeCnt - 1,
            postleft, postleft + leftSubtreeCnt - 1,
            in, post);
        head->right = Post(inRootIndex + 1, inright,
            postleft + leftSubtreeCnt, postright - 1,
            in, post);
        return head;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
        for (int i = 0; i < inorder.size(); i++)
                imap[inorder[i]] = i;
        return Post(0, inorder.size() - 1, 0, postorder.size() - 1, inorder, postorder);
    }
};
class Solution {
public:
vector<vector<int>> fourSum(vector<int>& nums, int target) 
{
	vector<vector<int>> v;
	if (nums.size() < 4)
		return v;
	int n = nums.size();
	sort(nums.begin(), nums.end());
	if (target > 0 && nums.back() <= 0)
		return v;
	if (target < 0 && nums.front() >= 0)
		return v;
	//-2 -1 0 0 1 2
	int i1, i2, i3, i4;
	for (i1 = 0; i1 < n - 3; ++i1)
	{
		if (i1 != 0 && nums[i1] == nums[i1 - 1])
			continue;

		// 若从第 i 位开始的最小的数字组合都比 target 大，找不到满足条件的组合，结束循环
		if (nums[i1] + nums[i1 + 1] + nums[i1 + 2] + nums[i1 + 3] > target)
			break;

		// 若从第 i 位开始的最大的数字组合都比 target 小，找不到满足条件的组合，结束循环
		if (nums[i1] + nums[n - 3] + nums[n - 2] + nums[n - 1] < target)
			// smallest sum for j
			continue;

		for (i2 = i1 + 1; i2 < n - 2; ++i2)
		{
			if (i2 != i1 + 1 && nums[i2] == nums[i2 - 1])
				continue;

			// 若从第 i 位开始的最大的数字组合都比 target - nums[i] 大，找不到满足条件的组合，结束循环
			if (nums[i2] + nums[i2 + 1] + nums[i2 + 2] > target - nums[i1])
				break;

			// 若从第 i 位开始的最大的数字组合都比 target - nums[i] 小，找不到满足条件的组合，结束循环
			if (nums[i2] + nums[n - 2] + nums[n - 1] < target - nums[i1])
				continue;

			i3 = i2 + 1;
			i4 = n - 1;
			while (i3 < i4)
			{
				int sum = nums[i1] + nums[i2] + nums[i3] + nums[i4];
				if (sum == target)
				{
					v.push_back({ nums[i1],nums[i2],nums[i3],nums[i4] });
					while (i3 < i4 && nums[i3] == nums[i3 + 1])
						++i3;
					while (i3 < i4 && nums[i4] == nums[i4 - 1])
						--i4;
					++i3;
					--i4;
				}
				else if (sum > target)
				{
					--i4;
				}
				else if (sum < target)
				{
					++i3;
				}
			}
		}
	}
	return v;
}
};
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
public:
    int min1;
    int min2;
    bool foundMin2;
    void Search(TreeNode* node)
    {
        if (node->val<=min2 && node->val>min1)
        {
            min2 = node->val;
            foundMin2 = true;
        }
        if (node->val < min1)
        {
            min2 = min1;
            foundMin2 = true;
            min1 = node->val;
        }
        if (node->left != nullptr && node->left->val == node->val)
        {
            Search(node->left);
            Search(node->right);
        }
        else if (node->right != nullptr && node->right->val == node->val)
        {
            Search(node->right);
            Search(node->left);
        }
    }
    int findSecondMinimumValue(TreeNode* root) 
    {
        foundMin2 = false;
        min1 = root->val;
        min2 = std::numeric_limits<int>::max();
        
        Search(root);

        return foundMin2?min2 : -1;
    }
};
class Solution
{
public:
    std::vector<std::vector<int>> reconstructQueue(std::vector<std::vector<int>>& people) 
    {
        auto res = std::vector<std::vector<int>>(people.size(), std::vector<int>{-1,-1});
        std::sort(people.begin(), people.end(), [](const std::vector<int>& a, const std::vector<int>& b)
            {
                if (a[0] != b[0]) return a[0] < b[0];
                else return a[1] > b[1];
            });
        int n = people.size();
        std::vector<std::vector<int>> ans(n);
        for (const std::vector<int>& person : people) 
        {
            int spaces = person[1] + 1;
            for (int i = 0; i < n; ++i) 
            {
                if (ans[i].empty()) 
                {
                    --spaces;
                    if (!spaces) 
                    {
                        ans[i] = person;
                        break;
                    }
                }
            }
        }
        return ans;
    }
};
class Solution
{
public:
    std::vector<std::vector<int>> routes;
    std::vector<int> route;
    std::vector<bool> book;
    int targetNode;
    void DFS(int node, const std::vector<std::vector<int>>& graph)
    {
        if (node == targetNode)
        {
            routes.push_back(route);
            return;
        }


        for (const int& nei : graph[node])
        {
            if (!book[nei])
            {
                book[nei] = true;
                route.push_back(nei);
                DFS(nei, graph);
                book[nei] = false;
                route.pop_back();
            }
        }
    }
    std::vector<std::vector<int>> allPathsSourceTarget(std::vector<std::vector<int>>& graph)
    {
        route.reserve(graph.size());
        book = std::vector<bool>(graph.size(), false);
        targetNode = graph.size() - 1;
        route.push_back(0);
        book[0] = true;

        DFS(0, graph);

        return routes;
    }
};
1.
class Solution {
public:
vector<int> searchRange(vector<int>& nums, int target) 
{
	vector<int> v(2);
	auto itLeft = lower_bound(nums.begin(), nums.end(), target);
	auto itRight = upper_bound(nums.begin(), nums.end(), target);
	if (itLeft == itRight)
		return vector<int>({ -1,-1 });
	else
	{
		v[0] = int(itLeft - nums.begin());
		v[1] = int(itRight - nums.begin() - 1);
		return v;
	}
}
};

2.
class Solution {
public:
vector<int> searchRange(vector<int>& nums, int target) 
{
	vector<int> v(2, -1);
	if (nums.empty())
		return v;
	int left, right, mid;
	left = 0, right = nums.size() - 1;
	while (left<right)
	{
		mid = left + (right - left) / 2;
		if (nums[mid] == target)
			right = mid;
		else if (nums[mid] > target)
			right = mid;
		else if (nums[mid] < target)
			left = mid + 1;
	}
	if (nums[left] != target)
		return v;
	v[0] = left;
	left = 0, right = nums.size();
	while (left < right)
	{
		mid = left + (right - left) / 2;
		if (nums[mid] == target)
			left = mid + 1;
		else if (nums[mid] > target)
			right = mid;
		else if (nums[mid] < target)
			left = mid + 1;
	}
	v[1] = left - 1;
	return v;
}
};

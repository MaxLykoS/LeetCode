class Trie
{
public:
	struct TrieNode
	{
		bool isWord;
		std::vector<TrieNode*> childs;
	public:
		TrieNode()
			:
			isWord(false),
			childs(26, nullptr)
		{
		
		}
	};
private:
	TrieNode* root;
public:
	Trie()
		:
		root(new TrieNode())
	{}
	Trie(const Trie&) = delete;
	Trie& operator=(const Trie&) = delete;
	void insert(std::string word)
	{
		TrieNode* node = root;
		for (char c : word)
		{
			if (node->childs[c - 'a'] == nullptr)
				node->childs[c - 'a'] = new TrieNode();
			node = node->childs[c - 'a'];
		}
		node->isWord = true;
	}
	bool search(std::string word)
	{
		TrieNode* node = root;
		for (char c : word)
		{
			if (node->childs[c - 'a'] == nullptr)
				return false;
			else
			{
				node = node->childs[c - 'a'];
			}
		}
		return node->isWord;
	}
	bool startsWith(std::string prefix)
	{
		TrieNode* node = root;
		for (char c : prefix)
		{
			if (node->childs[c - 'a'] != nullptr)
				node = node->childs[c - 'a'];
			else
				return false;
		}
		return true;
	}
	void deleteTrie(TrieNode* node)
	{
		for (int i = 0; i < node->childs.size(); i++)
		{
			if (node->childs[i] != nullptr)
				deleteTrie(node->childs[i]);
		}
		delete node;
	}
	TrieNode* GetRoot()
	{
		return root;
	}
	~Trie()
	{
		deleteTrie(root);
	}
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
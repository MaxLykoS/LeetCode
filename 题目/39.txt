class Solution
{
public:
    std::vector<std::vector<int>> ans;
    std::vector<int> t;
    int tar;
    void DFS(int index, int sum, const std::vector<int>& nums)
    {
        if (index == nums.size())
            return;

        if (sum > tar)
            return;
        else if (sum == tar)
            ans.emplace_back(t);
        else
        {
            // skip
            DFS(index + 1, sum, nums);

            //choose
            if (sum + nums[index] <= tar)
            {
                t.emplace_back(nums[index]);
                DFS(index, sum + nums[index], nums);
                t.pop_back();
            }
        }
    }
    std::vector<std::vector<int>> combinationSum(std::vector<int>& candidates, int target) 
    {
        tar = target;

        DFS(0, 0, candidates);

        return ans;
    }
};
1
class Solution {
public:
void rotate(vector<int>& nums, int k) 
{
	int size = nums.size();
	//k = k % size;
	int count = 0;
	for (int start = 0; count < size; ++start)
	{
		int current = start;
		int prev = nums[start];
		do {
			int next = (current + k) % size;
			int temp = nums[next];
			nums[next] = prev;
			prev = temp;
			current = next;
			count++;
		} while (start != current);
	}
}
};

2
class Solution {
public:
void rotate(vector<int>& nums, int k) 
{
	if (nums.size() <= 1)
		return;
	k = k % nums.size();
	vector<int> copy(nums.end() - k, nums.end());
	nums.erase(nums.end() - k, nums.end());
	nums.insert(nums.begin(), copy.begin(),copy.end());
}
};

3
void rotate(vector<int>& nums, int k) 
{
	if (nums.size() <= 1)
		return;
	k = k % nums.size();
	vector<int> v = nums;
	for (int i = 0; i < nums.size(); ++i)
	{
		nums[(i + k) % nums.size()] = v[i];
	}
}
class Solution
{
public:
    std::vector<std::vector<int>> ans;
    std::vector<int> route;
    std::vector<bool> visited;
    void DFS(int index, const int remain, const std::vector<int>& nums)
    {
        if (remain == 0)
        {
            ans.emplace_back(route);
        }
        else
        {
            for (int i = index+1; i < nums.size(); ++i)
            {
                if (remain - nums[i] < 0)
                    break;
                if (i - 1 >= 0 && nums[i] == nums[i - 1] && !visited[i - 1])
                    continue;
                if (!visited[i])
                {
                    visited[i] = true;
                    route.emplace_back(nums[i]);
                    DFS(i, remain - nums[i], nums);
                    visited[i] = false;
                    route.pop_back();
                }
            }
        }
    }
    std::vector<std::vector<int>> combinationSum2(std::vector<int>& candidates, int target)
    {
        std::sort(candidates.begin(), candidates.end());
        visited = std::vector<bool>(candidates.size(), false);

        DFS(-1, target, candidates);

        return ans;
    }
};
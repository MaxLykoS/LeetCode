class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m, n;
        m = int(obstacleGrid.size());
        if (m == 0) {
            return 0;
        }
        n = int(obstacleGrid[0].size());
        if (n == 0) {
            return 0;
        }
        
        long int dp[m][n];
        memset(dp, 0, sizeof(dp));
        
        for (int i = 0; i < m ; i++) {
            if (obstacleGrid[i][0] == 1) {
                for (int j = i; j < m; j++) {
                    dp[i][0] = 0;
                }
                break;
            }
            else {
                 dp[i][0] = 1;
            }
        }
        
        for (int i = 0; i < n ; i++) {
            if (obstacleGrid[0][i] == 1) {
                for (int j = i; j < m; j++) {
                    dp[0][i] = 0;
                }
                break;
            }
            else {
                dp[0][i] = 1;
            }
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }
                if (i == 0 || j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
};
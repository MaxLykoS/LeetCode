class Solution {
public:
    std::vector<std::vector<int>> dir;
    void DFS(int i, int j, std::vector<std::vector<char>>& grid,
        std::vector<std::vector<bool>>& reached)
    {
        reached[i][j] = true;
        for (int index = 0; index < 4; index++)
        {
            int newI = i + dir[index][0];
            int newJ = j + dir[index][1];
            if (newI >= 0 && newI < grid.size() && newJ >= 0 && newJ < grid[i].size())
            {
                if (grid[newI][newJ] == '1' && reached[newI][newJ] == false)
                {
                    DFS(newI, newJ, grid, reached);
                }
            }
        }
    }
    int numIslands(std::vector<std::vector<char>>& grid)
    {
        int ans = 0;
        std::vector<std::vector<bool>> reached(grid.size(), std::vector<bool>(grid[0].size(), false));
        dir.emplace_back(std::vector<int>({ -1, 0 }));
        dir.emplace_back(std::vector<int>({ 1, 0 }));
        dir.emplace_back(std::vector<int>({ 0, -1 }));
        dir.emplace_back(std::vector<int>({ 0, 1 }));

        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[i].size(); j++)
            {
                if (grid[i][j] == '1' && reached[i][j] == false)
                {
                    ++ans;
                    DFS(i, j, grid, reached);
                }
            }
        }

        return ans;
    }
};
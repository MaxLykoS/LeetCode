class RandomizedSet 
{
private:
	std::unordered_map<int, int> dict;  //val,index
	std::vector<int> valBuck;  //存val在dict中的key
public:
	RandomizedSet()
		:
		dict(),
		valBuck()
	{
		
	}
	bool insert(int val)
	{
        if (dict.count(val)) return false;
        valBuck.push_back(val);
        dict[val] = valBuck.size() - 1;
        return true;
	}
	bool remove(int val)
	{
		if (!dict.count(val)) return false;
		int last = valBuck.back();   //00 11 22 33 44
		dict[last] = dict[val];      //
		valBuck[dict[val]] = last;   //00 12 23 34
		valBuck.pop_back();
		dict.erase(val);
		return true;
	}
	int getRandom()
	{
		return valBuck[rand() % valBuck.size()];
	}
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
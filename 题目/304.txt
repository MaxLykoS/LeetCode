class NumMatrix 
{
private:
    std::vector<std::vector<int>> preSum;
public:
    NumMatrix(std::vector<std::vector<int>>& matrix) 
        :
        preSum(matrix.size(), std::vector<int>(matrix[0].size(), 0))
    {
        int sum = 0;
        for (int j = 0; j < matrix[0].size(); j++)
        {
            sum += matrix[0][j];
            preSum[0][j] = sum;
        }
        sum = 0;
        for (int i = 0; i < matrix.size(); i++)
        {
            sum += matrix[i][0];
            preSum[i][0] = sum;
        }

        if (matrix.size() >= 2 && matrix[0].size() >= 2)
        {
            for (int i = 1; i < matrix.size(); i++)
            {
                for (int j = 1; j < matrix[i].size(); j++)
                {
                    preSum[i][j] = preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1] + matrix[i][j];
                }
            }
        }
    }

    int sumRegion(int row1, int col1, int row2, int col2) 
    {
        if (preSum.size() == 0)
            return 0;
        else if (row1 == 0 && col1 == 0)
            return preSum[row2][col2];
        else if (row1 == 0)
            return preSum[row2][col2] - preSum[row2][col1 - 1];
        else if (col1 == 0)
            return preSum[row2][col2] - preSum[row1 - 1][col2];
        return preSum[row2][col2] - preSum[row2][col1 - 1] - preSum[row1 - 1][col2] + preSum[row1 - 1][col1 - 1];
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */